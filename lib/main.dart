import 'package:get/get.dart';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:app4_receitas/di/service_locator.dart'; // Mant√©m o setUpDependencies()
import 'package:app4_receitas/routes/app_router.dart';
import 'package:app4_receitas/utils/config/env.dart';
import 'package:app4_receitas/utils/theme/custom_theme_controller.dart';
// DIFEREN√áA 1: Service com persist√™ncia ao inv√©s de LocaleController simples
import 'package:app4_receitas/services/localization_service.dart';
// DIFEREN√áA 2: Import da pasta generated/ (reorganiza√ß√£o da estrutura) ao inv√©s de app_localizations.dart direto
import 'package:app4_receitas/l10n/generated/app_localizations.dart';

Future<void> main() async {
  // Garante que o Flutter est√° inicializado
/*  WidgetsFlutterBinding.ensureInitialized();

  // carregar vari√°veis de ambiente
  //await Env.init();

  // Inicializar o Supabase
  //await Supabase.initialize(url: Env.supabaseUrl, anonKey: Env.supabaseAnonKey,);
  await Supabase.initialize(
    url: 'https://juribdadppycdlovoyxe.supabase.co', // SUA URL
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp1cmliZGFkcHB5Y2Rsb3ZveXhlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0MzE2ODcsImV4cCI6MjA3MDAwNzY4N30.-ayR36OhOhjJbSc7BUI3b_L6OTYeDorgPxjXo-aTKs4', // SUA ANON PUBLIC KEY
    debug: true, // log detalhado no console
  );
*/
    WidgetsFlutterBinding.ensureInitialized();
await Env.init(); // <- precisa vir antes do initialize

await Supabase.initialize(
  url: Env.supabaseUrl,
  anonKey: Env.supabaseAnonKey,
);

  // Inicializando as depend√™ncias
  await setupDependencies();

  // DIFEREN√áA 3: Inicializa√ß√£o do service no main() para garantir disponibilidade global
  // Vers√£o original: Get.put(LocaleController()) no build()
  Get.put(LocalizationService());

  runApp(const AndrehlbApp());
  // runnApp(const MyApp());
}

// DIFEREN√áA 4: Nome da classe app personalizado (AndrehlbApp) ao inv√©s de MainApp gen√©rico
class AndrehlbApp extends StatelessWidget {
  const AndrehlbApp({super.key});

  @override
  Widget build(BuildContext context) {

    // * Get.put
    // Usado para injetar depend√™ncias no GetX
    final theme = Get.put(CustomThemeController());
    // DIFEREN√áA 5: Busca o service j√° inicializado ao inv√©s de criar novo controller
    // Vers√£o original: final localeController = Get.put(LocaleController());
    final localizationService = Get.find<LocalizationService>();

    // * Obx
    // Usado para tornar um widget reativo
    return Obx(
      () => MaterialApp.router(
        title: 'Eu Amo Cozinhar',
        debugShowCheckedModeBanner: false,
        theme: theme.customTheme,
        darkTheme: theme.customThemeDark,
        themeMode: theme.isDark.value ? ThemeMode.dark : ThemeMode.light,
        
        // Configura√ß√£o de internacionaliza√ß√£o
        localizationsDelegates: [
          AppLocalizations.delegate,
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        // DIFEREN√áA 6: Lista din√¢mica de locales ao inv√©s de hardcoded
        // Vers√£o original: supportedLocales: [Locale('en'), Locale('pt', 'BR')]
        supportedLocales: LocalizationService.supportedLocales,
        // DIFEREN√áA 7: Locale com persist√™ncia autom√°tica ao inv√©s de apenas em mem√≥ria
        // Vers√£o original: locale: localeController.locale (sem persist√™ncia)
        locale: localizationService.currentLocale,
        
        routerConfig: AppRouter().router,
      ),
    );
  }
}

/*
RESUMO DAS PRINCIPAIS DIFEREN√áAS EM RELA√á√ÉO √Ä VERS√ÉO ORIGINAL:

1. ‚úÖ Service avan√ßado: LocalizationService vs LocaleController simples
2. ‚úÖ Estrutura organizada: Import da pasta generated/ ao inv√©s de direta
3. ‚úÖ Inicializa√ß√£o no main(): Service dispon√≠vel globalmente desde o in√≠cio
4. ‚úÖ Nome personalizado: AndrehlbApp ao inv√©s de MainApp gen√©rico  
5. ‚úÖ Service injetado: Get.find<>() ao inv√©s de Get.put() no build()
6. ‚úÖ Locales din√¢micos: Lista configur√°vel ao inv√©s de hardcoded
7. ‚úÖ Persist√™ncia autom√°tica: SharedPreferences vs apenas mem√≥ria

BENEF√çCIOS IMPLEMENTADOS:
- üíæ App "lembra" do idioma escolhido entre sess√µes
- üèóÔ∏è Concentra√ß√£o da l√≥gica de neg√≥cio num lugar s√≥
- üîß Maior flexibilidade para adicionar novos idiomas
- üß™ Teste com mock √∫nico
- üì± UX melhorada - configura√ß√£o persiste
*/